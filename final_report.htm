<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Memory Analysis Report</title>
    <style>
        /* Embedded CSS for self-contained report */
        body {
            font-family: 'Segoe UI', Tahoma, Geneva, Verdana, sans-serif;
            margin: 0;
            padding: 20px;
            background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
            min-height: 100vh;
        }
        
        .container {
            max-width: 1400px;
            margin: 0 auto;
            background: rgba(255, 255, 255, 0.95);
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 20px 40px rgba(0, 0, 0, 0.1);
        }
        
        .header {
            text-align: center;
            margin-bottom: 40px;
            padding-bottom: 20px;
            border-bottom: 3px solid #667eea;
        }
        
        .header h1 {
            color: #2c3e50;
            font-size: 2.5em;
            margin: 0;
            text-shadow: 2px 2px 4px rgba(0, 0, 0, 0.1);
        }
        
        .header .subtitle {
            color: #7f8c8d;
            font-size: 1.2em;
            margin-top: 10px;
        }
        
        .metrics-grid {
            display: grid;
            grid-template-columns: repeat(auto-fit, minmax(250px, 1fr));
            gap: 20px;
            margin-bottom: 40px;
        }
        
        .metric-card {
            background: linear-gradient(135deg, #3498db, #2980b9);
            color: white;
            padding: 25px;
            border-radius: 12px;
            text-align: center;
            box-shadow: 0 8px 16px rgba(52, 152, 219, 0.3);
            transition: transform 0.3s ease;
        }
        
        .metric-card:hover {
            transform: translateY(-5px);
        }
        
        .metric-card .value {
            font-size: 2.5em;
            font-weight: bold;
            margin-bottom: 10px;
        }
        
        .metric-card .label {
            font-size: 1.1em;
            opacity: 0.9;
        }
        
        .visualization-section {
            margin-bottom: 40px;
            background: #f8f9fa;
            border-radius: 12px;
            padding: 25px;
            border-left: 5px solid #667eea;
        }
        
        .visualization-section h2 {
            color: #2c3e50;
            margin-top: 0;
            font-size: 1.8em;
        }
        
        .svg-container {
            width: 100%;
            overflow-x: auto;
            background: white;
            border-radius: 8px;
            padding: 20px;
            box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        }
        
        .no-data {
            text-align: center;
            color: #7f8c8d;
            font-style: italic;
            padding: 40px;
            background: #ecf0f1;
            border-radius: 8px;
        }
        
        .timestamp {
            text-align: center;
            color: #95a5a6;
            font-size: 0.9em;
            margin-top: 30px;
            padding-top: 20px;
            border-top: 1px solid #ecf0f1;
        }
    </style>
</head>
<body>
    <div class="container">
        <div class="header">
            <h1>üîç Memory Analysis Report</h1>
            <div class="subtitle">Comprehensive Rust Memory Usage Analysis</div>
        </div>
        
        <div class="metrics-grid" id="metricsGrid">
            <!-- Metrics will be populated by JavaScript -->
        </div>
        
        <div class="visualization-section">
            <h2>üìä Lifecycle Timeline Visualization</h2>
            <div class="svg-container" id="lifecycleVisualization">
                <!-- SVG content will be generated here -->
            </div>
        </div>
        
        <div class="visualization-section">
            <h2>üõ°Ô∏è Unsafe/FFI Analysis Dashboard</h2>
            <div class="svg-container" id="unsafeFFIVisualization">
                <!-- SVG content will be generated here -->
            </div>
        </div>
        
        <div class="visualization-section">
            <h2>üíæ Memory Analysis</h2>
            <div class="svg-container" id="memoryAnalysisVisualization">
                <!-- SVG content will be generated here -->
            </div>
        </div>
        
        <div class="timestamp" id="timestamp">
            <!-- Timestamp will be populated -->
        </div>
    </div>

    <script type="text/javascript">
// Embedded JSON data for offline analysis
window.EMBEDDED_MEMORY_DATA = {
  "memory_hierarchy": {
    "Basic Types": {
      "subcategories": {
        "Integers": {
          "summary": {
            "percentage_of_category": "33.5%",
            "percentage_of_total": "11.8%",
            "total_size_bytes": 64,
            "type_count": 2
          },
          "types": [
            {
              "allocation_count": 5,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 72,
                  "type_name": "alloc::rc::Rc<core::cell::RefCell<alloc::vec::Vec<i32>>>",
                  "variable_name": "mutable_data"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 32,
                  "type_name": "alloc::boxed::Box<alloc::collections::vec_deque::VecDeque<i32>>",
                  "variable_name": "boxed_vec_deque"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                  "variable_name": "boxed_hash_map"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 56,
                  "type_name": "alloc::rc::Rc<alloc::vec::Vec<i32>>",
                  "variable_name": "shared_clone2"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::collections::btree::map::BTreeMap<i32, alloc::string::String>>",
                  "variable_name": "boxed_btree_map"
                }
              ],
              "percentage_of_subcategory": "90.6%",
              "percentage_of_total": "10.7%",
              "size_bytes": 58,
              "type_name": "i32",
              "variable_names": [
                "from alloc::rc::Rc<core::cell::RefCell<alloc::vec::Vec<i32>>>",
                "from alloc::rc::Rc<alloc::vec::Vec<i32>>",
                "from alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                "from alloc::boxed::Box<alloc::collections::vec_deque::VecDeque<i32>>",
                "from alloc::boxed::Box<alloc::collections::btree::map::BTreeMap<i32, alloc::string::String>>"
              ]
            },
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::vec::Vec<u8>>",
                  "variable_name": "boxed_large_data"
                }
              ],
              "percentage_of_subcategory": "9.4%",
              "percentage_of_total": "1.1%",
              "size_bytes": 6,
              "type_name": "u8",
              "variable_names": [
                "from alloc::boxed::Box<alloc::vec::Vec<u8>>"
              ]
            }
          ]
        },
        "Strings": {
          "summary": {
            "percentage_of_category": "66.5%",
            "percentage_of_total": "23.4%",
            "total_size_bytes": 127,
            "type_count": 3
          },
          "types": [
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 15,
                  "type_name": "String",
                  "variable_name": "global_app_config"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                  "variable_name": "boxed_hash_map"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::string::String>",
                  "variable_name": "boxed_string"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 56,
                  "type_name": "alloc::sync::Arc<alloc::string::String>",
                  "variable_name": "arc_clone"
                },
                {
                  "allocation_time": 1752401749776,
                  "size_bytes": 32,
                  "type_name": "String",
                  "variable_name": "static_string"
                },
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>",
                  "variable_name": "global_session_store"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::collections::btree::map::BTreeMap<i32, alloc::string::String>>",
                  "variable_name": "boxed_btree_map"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::set::HashSet<alloc::string::String>>",
                  "variable_name": "boxed_hash_set"
                }
              ],
              "percentage_of_subcategory": "44.1%",
              "percentage_of_total": "10.3%",
              "size_bytes": 56,
              "type_name": "String",
              "variable_names": [
                "global_app_config",
                "boxed_string",
                "arc_clone",
                "static_string"
              ]
            },
            {
              "allocation_count": 2,
              "allocations": [
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 15,
                  "type_name": "String",
                  "variable_name": "global_app_config"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                  "variable_name": "boxed_hash_map"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::string::String>",
                  "variable_name": "boxed_string"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 56,
                  "type_name": "alloc::sync::Arc<alloc::string::String>",
                  "variable_name": "arc_clone"
                },
                {
                  "allocation_time": 1752401749776,
                  "size_bytes": 32,
                  "type_name": "String",
                  "variable_name": "static_string"
                },
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>",
                  "variable_name": "global_session_store"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::collections::btree::map::BTreeMap<i32, alloc::string::String>>",
                  "variable_name": "boxed_btree_map"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::set::HashSet<alloc::string::String>>",
                  "variable_name": "boxed_hash_set"
                }
              ],
              "percentage_of_subcategory": "37.0%",
              "percentage_of_total": "8.7%",
              "size_bytes": 47,
              "type_name": "String",
              "variable_names": [
                "global_app_config",
                "boxed_string",
                "arc_clone",
                "static_string"
              ]
            },
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 15,
                  "type_name": "String",
                  "variable_name": "global_app_config"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                  "variable_name": "boxed_hash_map"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::string::String>",
                  "variable_name": "boxed_string"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 56,
                  "type_name": "alloc::sync::Arc<alloc::string::String>",
                  "variable_name": "arc_clone"
                },
                {
                  "allocation_time": 1752401749776,
                  "size_bytes": 32,
                  "type_name": "String",
                  "variable_name": "static_string"
                },
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>",
                  "variable_name": "global_session_store"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::collections::btree::map::BTreeMap<i32, alloc::string::String>>",
                  "variable_name": "boxed_btree_map"
                },
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::set::HashSet<alloc::string::String>>",
                  "variable_name": "boxed_hash_set"
                }
              ],
              "percentage_of_subcategory": "18.9%",
              "percentage_of_total": "4.4%",
              "size_bytes": 24,
              "type_name": "String",
              "variable_names": [
                "global_app_config",
                "boxed_string",
                "arc_clone",
                "static_string"
              ]
            }
          ]
        }
      },
      "summary": {
        "percentage_of_total": "35.2%",
        "subcategory_count": 2,
        "total_size_bytes": 191
      }
    },
    "Collections": {
      "subcategories": {
        "BTreeMap<K,V>": {
          "summary": {
            "percentage_of_category": "6.8%",
            "percentage_of_total": "4.4%",
            "total_size_bytes": 24,
            "type_count": 1
          },
          "types": [
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::collections::btree::map::BTreeMap<i32, alloc::string::String>>",
                  "variable_name": "boxed_btree_map"
                }
              ],
              "percentage_of_subcategory": "100.0%",
              "percentage_of_total": "4.4%",
              "size_bytes": 24,
              "type_name": "BTreeMap<K,V>",
              "variable_names": [
                "boxed_btree_map"
              ]
            }
          ]
        },
        "HashMap<K,V>": {
          "summary": {
            "percentage_of_category": "27.3%",
            "percentage_of_total": "17.7%",
            "total_size_bytes": 96,
            "type_count": 2
          },
          "types": [
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                  "variable_name": "boxed_hash_map"
                },
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>",
                  "variable_name": "global_session_store"
                }
              ],
              "percentage_of_subcategory": "50.0%",
              "percentage_of_total": "8.8%",
              "size_bytes": 48,
              "type_name": "HashMap<K,V>",
              "variable_names": [
                "boxed_hash_map",
                "global_session_store"
              ]
            },
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, i32>>",
                  "variable_name": "boxed_hash_map"
                },
                {
                  "allocation_time": 1752401749774,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::map::HashMap<alloc::string::String, alloc::string::String>>",
                  "variable_name": "global_session_store"
                }
              ],
              "percentage_of_subcategory": "50.0%",
              "percentage_of_total": "8.8%",
              "size_bytes": 48,
              "type_name": "HashMap<K,V>",
              "variable_names": [
                "boxed_hash_map",
                "global_session_store"
              ]
            }
          ]
        },
        "HashSet<T>": {
          "summary": {
            "percentage_of_category": "13.6%",
            "percentage_of_total": "8.8%",
            "total_size_bytes": 48,
            "type_count": 1
          },
          "types": [
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749777,
                  "size_bytes": 48,
                  "type_name": "alloc::boxed::Box<std::collections::hash::set::HashSet<alloc::string::String>>",
                  "variable_name": "boxed_hash_set"
                }
              ],
              "percentage_of_subcategory": "100.0%",
              "percentage_of_total": "8.8%",
              "size_bytes": 48,
              "type_name": "HashSet<T>",
              "variable_names": [
                "boxed_hash_set"
              ]
            }
          ]
        },
        "Vec<T>": {
          "summary": {
            "percentage_of_category": "43.2%",
            "percentage_of_total": "28.0%",
            "total_size_bytes": 152,
            "type_count": 3
          },
          "types": [
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 72,
                  "type_name": "alloc::rc::Rc<core::cell::RefCell<alloc::vec::Vec<i32>>>",
                  "variable_name": "mutable_data"
                }
              ],
              "percentage_of_subcategory": "47.4%",
              "percentage_of_total": "13.3%",
              "size_bytes": 72,
              "type_name": "Vec<i32>>>",
              "variable_names": [
                "mutable_data"
              ]
            },
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 72,
                  "type_name": "alloc::rc::Rc<core::cell::RefCell<alloc::vec::Vec<i32>>>",
                  "variable_name": "mutable_data"
                },
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 56,
                  "type_name": "alloc::rc::Rc<alloc::vec::Vec<i32>>",
                  "variable_name": "shared_clone2"
                }
              ],
              "percentage_of_subcategory": "36.8%",
              "percentage_of_total": "10.3%",
              "size_bytes": 56,
              "type_name": "Vec<i32>>",
              "variable_names": [
                "shared_clone2"
              ]
            },
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 24,
                  "type_name": "alloc::boxed::Box<alloc::vec::Vec<u8>>",
                  "variable_name": "boxed_large_data"
                }
              ],
              "percentage_of_subcategory": "15.8%",
              "percentage_of_total": "4.4%",
              "size_bytes": 24,
              "type_name": "Vec<u8>>",
              "variable_names": [
                "boxed_large_data"
              ]
            }
          ]
        },
        "VecDeque<T>": {
          "summary": {
            "percentage_of_category": "9.1%",
            "percentage_of_total": "5.9%",
            "total_size_bytes": 32,
            "type_count": 1
          },
          "types": [
            {
              "allocation_count": 1,
              "allocations": [
                {
                  "allocation_time": 1752401749778,
                  "size_bytes": 32,
                  "type_name": "alloc::boxed::Box<alloc::collections::vec_deque::VecDeque<i32>>",
                  "variable_name": "boxed_vec_deque"
                }
              ],
              "percentage_of_subcategory": "100.0%",
              "percentage_of_total": "5.9%",
              "size_bytes": 32,
              "type_name": "VecDeque<T>",
              "variable_names": [
                "boxed_vec_deque"
              ]
            }
          ]
        }
      },
      "summary": {
        "percentage_of_total": "64.8%",
        "subcategory_count": 5,
        "total_size_bytes": 352
      }
    }
  },
  "metadata": {
    "description": "Hierarchical memory analysis with categories and subcategories",
    "format_version": "1.0",
    "timestamp": "2025-07-13T10:15:49.878950Z"
  },
  "summary": {
    "active_allocations": 3742,
    "active_memory_bytes": 411735,
    "peak_memory_bytes": 679218,
    "total_allocations": 57380,
    "total_memory_bytes": 543
  }
};
console.log('üìä Loaded embedded memory analysis data');
</script>

    <script type="text/javascript">
        // Initialize the report when page loads
        document.addEventListener('DOMContentLoaded', function() {
            if (window.EMBEDDED_MEMORY_DATA) {
                initializeReport(window.EMBEDDED_MEMORY_DATA);
            } else {
                console.error('No embedded data found');
                showNoDataMessage();
            }
        });
        
        function initializeReport(data) {
            console.log('üöÄ Initializing memory analysis report...');
            
            // Populate metrics
            populateMetrics(data);
            
            // Generate visualizations
            generateLifecycleVisualization(data);
            generateUnsafeFFIVisualization(data);
            generateMemoryAnalysisVisualization(data);
            
            // Set timestamp
            setTimestamp(data);
            
            console.log('‚úÖ Report initialization complete');
        }
        
        function populateMetrics(data) {
            const metricsGrid = document.getElementById('metricsGrid');
            const memoryStats = data.memory_stats || {};
            const unsafeStats = extractUnsafeStats(data);
            
            const metrics = [
                {
                    label: 'Total Memory',
                    value: formatBytes(memoryStats.total_allocated_bytes || 0),
                    color: '#3498db'
                },
                {
                    label: 'Active Allocations',
                    value: memoryStats.total_allocations || 0,
                    color: '#2ecc71'
                },
                {
                    label: 'Unsafe Operations',
                    value: unsafeStats.total_operations || 0,
                    color: '#e74c3c'
                },
                {
                    label: 'Memory Efficiency',
                    value: ((memoryStats.memory_efficiency || 0) * 100).toFixed(1) + '%',
                    color: '#f39c12'
                }
            ];
            
            metricsGrid.innerHTML = metrics.map(metric => `
                <div class="metric-card" style="background: linear-gradient(135deg, ${metric.color}, ${adjustColor(metric.color, -20)});">
                    <div class="value">${metric.value}</div>
                    <div class="label">${metric.label}</div>
                </div>
            `).join('');
        }
        
        function generateLifecycleVisualization(data) {
            const container = document.getElementById('lifecycleVisualization');
            const svgContent = createLifecycleTimelineSVG(data);
            container.innerHTML = svgContent;
        }
        
        function generateUnsafeFFIVisualization(data) {
            const container = document.getElementById('unsafeFFIVisualization');
            const svgContent = createUnsafeFFIDashboardSVG(data);
            container.innerHTML = svgContent;
        }
        
        function generateMemoryAnalysisVisualization(data) {
            const container = document.getElementById('memoryAnalysisVisualization');
            const svgContent = createMemoryAnalysisSVG(data);
            container.innerHTML = svgContent;
        }
        
        function setTimestamp(data) {
            const timestampEl = document.getElementById('timestamp');
            const timestamp = data.timestamp || new Date().toISOString();
            timestampEl.textContent = `Report generated: ${new Date(timestamp).toLocaleString()}`;
        }
        
        function showNoDataMessage() {
            document.querySelector('.container').innerHTML = `
                <div class="header">
                    <h1>‚ùå No Data Available</h1>
                    <div class="subtitle">Unable to load embedded memory analysis data</div>
                </div>
                <div class="no-data">
                    <p>This report requires embedded JSON data to function.</p>
                    <p>Please regenerate the report with valid memory tracking data.</p>
                </div>
            `;
        }
        
        // Utility functions
        function formatBytes(bytes) {
            if (bytes === 0) return '0 B';
            const k = 1024;
            const sizes = ['B', 'KB', 'MB', 'GB'];
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
        }
        
        function adjustColor(color, amount) {
            const usePound = color[0] === '#';
            const col = usePound ? color.slice(1) : color;
            const num = parseInt(col, 16);
            let r = (num >> 16) + amount;
            let g = (num >> 8 & 0x00FF) + amount;
            let b = (num & 0x0000FF) + amount;
            r = r > 255 ? 255 : r < 0 ? 0 : r;
            g = g > 255 ? 255 : g < 0 ? 0 : g;
            b = b > 255 ? 255 : b < 0 ? 0 : b;
            return (usePound ? '#' : '') + (r << 16 | g << 8 | b).toString(16).padStart(6, '0');
        }
        
        // Include all the SVG rendering functions from dashboard.js
        // (These would be copied from the existing dashboard.js file)
        
        // Placeholder for SVG rendering functions
        function createLifecycleTimelineSVG(data) {
            return '<div class="no-data">Lifecycle visualization will be rendered here</div>';
        }
        
        function createUnsafeFFIDashboardSVG(data) {
            return '<div class="no-data">Unsafe/FFI analysis will be rendered here</div>';
        }
        
        function createMemoryAnalysisSVG(data) {
            return '<div class="no-data">Memory analysis will be rendered here</div>';
        }
        
        function extractUnsafeStats(data) {
            if (data.unsafe_ffi_stats) {
                return {
                    total_operations: data.unsafe_ffi_stats.total_operations || 0,
                    ffi_calls: data.unsafe_ffi_stats.ffi_calls || 0,
                    memory_violations: data.unsafe_ffi_stats.memory_violations || 0,
                    risk_score: data.unsafe_ffi_stats.risk_score || 0
                };
            }
            return { total_operations: 0, ffi_calls: 0, memory_violations: 0, risk_score: 0 };
        }
    </script>
</body>
</html>