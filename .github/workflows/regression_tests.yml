name: Regression Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  schedule:
    # Run regression tests daily at 2 AM UTC
    - cron: '0 2 * * *'

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  regression-tests:
    name: Comprehensive Regression Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        rust: [stable, beta, nightly]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: ${{ matrix.rust }}
        components: rustfmt, clippy
        
    - name: Cache cargo registry
      uses: actions/cache@v3
      with:
        path: |
          ~/.cargo/registry
          ~/.cargo/git
          target
        key: ${{ runner.os }}-cargo-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
        restore-keys: |
          ${{ runner.os }}-cargo-${{ matrix.rust }}-
          ${{ runner.os }}-cargo-
          
    - name: Install dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y build-essential
        
    - name: Check code formatting
      run: cargo fmt --all -- --check
      
    - name: Run clippy
      run: cargo clippy --all-targets --all-features -- -D warnings
      
    - name: Build project
      run: cargo build --verbose --all-features
      
    - name: Run unit tests
      run: cargo test --verbose --all-features
      
    - name: Establish performance baseline
      run: |
        cargo run --bin establish_baseline --features=tracking-allocator
        
    - name: Run API compatibility tests
      run: |
        cargo test --test api_compatibility_check --features=tracking-allocator -- --nocapture
        
    - name: Run regression test framework
      run: |
        cargo test --test regression_test_framework --features=tracking-allocator -- --nocapture
        
    - name: Run performance baseline tests
      run: |
        cargo test --test performance_baseline --features=tracking-allocator -- --nocapture
        
    - name: Generate regression report
      run: |
        cargo run --bin generate_regression_report --features=tracking-allocator
        
    - name: Upload regression report
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: regression-report-${{ matrix.rust }}
        path: |
          regression_report_*.md
          performance_baseline.json
          api_compatibility_report.md
          
    - name: Check for regressions
      run: |
        if [ -f "regression_failures.txt" ]; then
          echo "❌ Regressions detected!"
          cat regression_failures.txt
          exit 1
        else
          echo "✅ No regressions detected"
        fi

  memory-safety-tests:
    name: Memory Safety Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain with sanitizers
      uses: dtolnay/rust-toolchain@nightly
      with:
        components: rust-src
        
    - name: Run tests with AddressSanitizer
      env:
        RUSTFLAGS: -Zsanitizer=address
        RUSTDOCFLAGS: -Zsanitizer=address
      run: |
        cargo +nightly test --target x86_64-unknown-linux-gnu --features=tracking-allocator
        
    - name: Run tests with LeakSanitizer
      env:
        RUSTFLAGS: -Zsanitizer=leak
        RUSTDOCFLAGS: -Zsanitizer=leak
      run: |
        cargo +nightly test --target x86_64-unknown-linux-gnu --features=tracking-allocator

  benchmark-comparison:
    name: Performance Benchmark Comparison
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Install criterion
      run: cargo install cargo-criterion
      
    - name: Run benchmarks
      run: |
        cargo criterion --features=tracking-allocator
        
    - name: Compare with baseline
      run: |
        if [ -f "target/criterion/baseline.json" ]; then
          cargo run --bin compare_benchmarks --features=tracking-allocator
        else
          echo "No baseline found, establishing new baseline"
          cp target/criterion/report/index.html target/criterion/baseline.json
        fi
        
    - name: Upload benchmark results
      uses: actions/upload-artifact@v3
      with:
        name: benchmark-results
        path: |
          target/criterion/
          benchmark_comparison.md

  integration-tests:
    name: Integration Tests
    runs-on: ${{ matrix.os }}
    
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Run integration tests
      run: |
        cargo test --test integration_test --features=tracking-allocator -- --nocapture
        
    - name: Test CLI tools
      run: |
        cargo build --bins --features=tracking-allocator
        ./target/debug/allocation_count_diagnostic --help
        ./target/debug/performance_only_benchmark --help
        
    - name: Test examples
      run: |
        cargo run --example advanced_metrics_demo --features=tracking-allocator
        
    - name: Verify output files
      run: |
        ls -la *.json *.html *.svg || echo "No output files generated"

  documentation-tests:
    name: Documentation Tests
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Test documentation examples
      run: |
        cargo test --doc --features=tracking-allocator
        
    - name: Build documentation
      run: |
        cargo doc --no-deps --features=tracking-allocator
        
    - name: Check documentation links
      run: |
        cargo install cargo-deadlinks
        cargo deadlinks --check-http
        
    - name: Upload documentation
      uses: actions/upload-artifact@v3
      with:
        name: documentation
        path: target/doc/

  feature-compatibility:
    name: Feature Compatibility Tests
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        features:
          - ""
          - "tracking-allocator"
          - "derive"
          - "tracking-allocator,derive"
          
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      
    - name: Test with features: ${{ matrix.features }}
      run: |
        if [ -n "${{ matrix.features }}" ]; then
          cargo test --features="${{ matrix.features }}" -- --nocapture
        else
          cargo test --no-default-features -- --nocapture
        fi
        
    - name: Build with features: ${{ matrix.features }}
      run: |
        if [ -n "${{ matrix.features }}" ]; then
          cargo build --features="${{ matrix.features }}"
        else
          cargo build --no-default-features
        fi

  security-audit:
    name: Security Audit
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install cargo-audit
      run: cargo install cargo-audit
      
    - name: Run security audit
      run: cargo audit
      
    - name: Check for known vulnerabilities
      run: |
        cargo audit --deny warnings
        
  code-coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Install Rust toolchain
      uses: dtolnay/rust-toolchain@stable
      with:
        components: llvm-tools-preview
        
    - name: Install cargo-llvm-cov
      run: cargo install cargo-llvm-cov
      
    - name: Generate code coverage
      run: |
        cargo llvm-cov --all-features --workspace --lcov --output-path lcov.info
        
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        files: lcov.info
        fail_ci_if_error: true
        
    - name: Check coverage threshold
      run: |
        cargo llvm-cov --all-features --workspace --summary-only | grep -E "TOTAL.*([0-9]+\.[0-9]+%)"
        # Ensure coverage is above 80%
        coverage=$(cargo llvm-cov --all-features --workspace --summary-only | grep -oE "TOTAL.*([0-9]+\.[0-9]+%)" | grep -oE "[0-9]+\.[0-9]+" | head -1)
        if (( $(echo "$coverage < 80.0" | bc -l) )); then
          echo "❌ Code coverage $coverage% is below 80% threshold"
          exit 1
        else
          echo "✅ Code coverage $coverage% meets threshold"
        fi

  notify-results:
    name: Notify Results
    runs-on: ubuntu-latest
    needs: [regression-tests, memory-safety-tests, benchmark-comparison, integration-tests]
    if: always()
    
    steps:
    - name: Notify success
      if: ${{ needs.regression-tests.result == 'success' && needs.memory-safety-tests.result == 'success' }}
      run: |
        echo "✅ All regression tests passed successfully!"
        
    - name: Notify failure
      if: ${{ needs.regression-tests.result == 'failure' || needs.memory-safety-tests.result == 'failure' }}
      run: |
        echo "❌ Some regression tests failed!"
        echo "Check the logs for details."
        exit 1