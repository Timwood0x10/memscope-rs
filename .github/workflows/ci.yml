name: CI/CD Pipeline

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Check code formatting and basic validation
  check:
    name: Code Quality Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      - name: Check code formatting
        run: cargo fmt -- --check

      - name: Run clippy
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check compilation
        run: cargo check --all-targets --all-features

  # Run comprehensive test suite
  test:
    name: Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta]
        exclude:
          # Reduce CI load - only test beta on Ubuntu
          - os: windows-latest
            rust: beta
          - os: macos-latest
            rust: beta
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-${{ matrix.rust }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.rust }}-cargo-

      - name: Run unit tests
        run: cargo test --lib --verbose

      - name: Run integration tests
        run: cargo test --test integration_test --verbose

      - name: Run stress tests
        run: cargo test --test stress_test --verbose

      - name: Run safety tests
        run: cargo test --test safety_test --verbose

      - name: Run edge case tests
        run: cargo test --test edge_cases_test --verbose

      - name: Run comprehensive tests
        run: cargo test --test comprehensive_integration_test --verbose

      - name: Run performance tests (release mode)
        run: cargo test --test performance_test --release --verbose

  # Test examples
  examples:
    name: Example Tests
    runs-on: ubuntu-latest
    needs: [check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-examples-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run basic usage example
        run: cargo run --example basic_usage

      - name: Run lifecycle example
        run: cargo run --example lifecycles

      - name: Run main application
        run: cargo run

      - name: Verify output files
        run: |
          ls -la *.json *.svg || echo "No output files found (this may be expected)"

  # Documentation and security
  docs-and-security:
    name: Documentation & Security
    runs-on: ubuntu-latest
    needs: [check]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-docs-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Generate documentation
        run: cargo doc --no-deps --all-features --document-private-items

      - name: Check documentation
        run: cargo doc --no-deps --all-features

      - name: Install cargo-audit
        run: cargo install cargo-audit

      - name: Security audit
        run: cargo audit

      - name: Upload documentation
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/upload-artifact@v3
        with:
          name: documentation
          path: target/doc/

  # Code coverage (optional, only on main branch)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-tarpaulin
        run: cargo install cargo-tarpaulin

      - name: Generate code coverage
        run: cargo tarpaulin --verbose --all-features --workspace --timeout 120 --out xml

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: cobertura.xml
          fail_ci_if_error: false

  # Performance benchmarks (only on main branch)
  benchmarks:
    name: Performance Benchmarks
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
    needs: [test]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry
        uses: actions/cache@v3
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-bench-cargo-${{ hashFiles('**/Cargo.lock') }}

      - name: Run performance benchmarks
        run: cargo test --test performance_test --release -- --nocapture

      - name: Upload benchmark results
        uses: actions/upload-artifact@v3
        with:
          name: benchmark-results
          path: target/release/

  # Release builds (only on tags)
  release:
    name: Release Build
    runs-on: ${{ matrix.os }}
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [check, test, examples, docs-and-security]
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            artifact_name: trace_tools
            asset_name: trace_tools-linux-x86_64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            artifact_name: trace_tools.exe
            asset_name: trace_tools-windows-x86_64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            artifact_name: trace_tools
            asset_name: trace_tools-macos-x86_64

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }}

      - name: Upload release artifact
        uses: actions/upload-artifact@v3
        with:
          name: ${{ matrix.asset_name }}
          path: target/${{ matrix.target }}/release/${{ matrix.artifact_name }}

  # Create GitHub release (only on tags)
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [release]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v3

      - name: Create Release
        uses: softprops/action-gh-release@v1
        with:
          files: |
            trace_tools-linux-x86_64/trace_tools
            trace_tools-windows-x86_64.exe/trace_tools.exe
            trace_tools-macos-x86_64/trace_tools
          body: |
            ## Release Notes
            
            This is an automated release of trace_tools.
            
            ### Features
            - Advanced Rust memory tracking and analysis
            - Beautiful SVG visualizations
            - JSON export for programmatic analysis
            - Thread-safe operation with deadlock prevention
            - Comprehensive test suite with 49+ tests
            
            ### Installation
            Download the appropriate binary for your platform and add it to your PATH.
            
            ### Documentation
            See the README for usage instructions.
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Deployment notification
  notify:
    name: Deployment Notification
    runs-on: ubuntu-latest
    if: always()
    needs: [check, test, examples, docs-and-security]
    
    steps:
      - name: Notify success
        if: ${{ needs.check.result == 'success' && needs.test.result == 'success' && needs.examples.result == 'success' && needs.docs-and-security.result == 'success' }}
        run: |
          echo "All CI checks passed successfully!"
          echo "Code quality: PASS"
          echo "Tests: PASS" 
          echo "Examples: PASS"
          echo "Documentation: PASS"
          echo "Security: PASS"

      - name: Notify failure
        if: ${{ needs.check.result == 'failure' || needs.test.result == 'failure' || needs.examples.result == 'failure' || needs.docs-and-security.result == 'failure' }}
        run: |
          echo "CI pipeline failed!"
          echo "Check the logs above for details."
          exit 1