name: memscope-rs CI

on:
  push:
    branches: [ main, master, develop ]
    tags: [ 'v*' ]
  pull_request:
    branches: [ main, master, develop ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1
  RUSTFLAGS: "-D warnings"

jobs:
  # Code quality checks
  quality:
    name: Code Quality & Format Check
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: quality-${{ hashFiles('**/Cargo.lock') }}
      
      # Strict formatting check - fail if any file is not properly formatted
      - name: Check code formatting (strict)
        run: |
          echo "üîç Checking code formatting with cargo fmt..."
          if ! cargo fmt --all -- --check; then
            echo "‚ùå Code formatting check failed!"
            echo "üí° Please run 'cargo fmt --all' to fix formatting issues"
            echo "üìã Files that need formatting:"
            cargo fmt --all -- --check --verbose 2>&1 || true
            exit 1
          fi
          echo "‚úÖ All code is properly formatted"
      
      # Enhanced clippy analysis with zero tolerance for warnings
      - name: Clippy analysis (zero warnings)
        run: |
          echo "üîç Running clippy analysis with zero warning tolerance..."
          cargo clippy --workspace --all-targets --all-features -- \
            -D warnings \
            -D clippy::all \
            -D clippy::pedantic \
            -W clippy::nursery \
            -D clippy::cargo
          echo "‚úÖ Clippy analysis passed with zero warnings"
      
      # Compilation check with zero warnings
      - name: Check compilation (zero warnings)
        run: |
          echo "üîç Checking compilation with zero warning tolerance..."
          RUSTFLAGS="-D warnings" cargo check --workspace --all-targets --all-features
          echo "‚úÖ Compilation check passed with zero warnings"
      
      # Additional checks for code quality
      - name: Check for TODO/FIXME comments
        run: |
          echo "üîç Checking for TODO/FIXME comments..."
          if grep -r "TODO\|FIXME" src/ --include="*.rs" | grep -v "// TODO: This is acceptable"; then
            echo "‚ö†Ô∏è  Found TODO/FIXME comments in code"
            echo "üí° Consider addressing these before merging"
            # Don't fail the build, just warn
          else
            echo "‚úÖ No TODO/FIXME comments found"
          fi
      
      # Check for proper documentation
      - name: Check documentation completeness
        run: |
          echo "üîç Checking documentation completeness..."
          RUSTDOCFLAGS="-D missing_docs -D rustdoc::broken_intra_doc_links" \
          cargo doc --workspace --all-features --no-deps --document-private-items
          echo "‚úÖ Documentation check passed"

  # Test suite
  test:
    name: Tests
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, 1.70.0] # MSRV
        include:
          - os: ubuntu-latest
            rust: beta
          - os: ubuntu-latest  
            rust: nightly
            experimental: true
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust ${{ matrix.rust }}
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-${{ matrix.rust }}-${{ hashFiles('**/Cargo.lock') }}
      
      # Core library tests with zero warnings
      - name: Run library tests (zero warnings)
        run: |
          echo "üîç Running library tests with zero warning tolerance..."
          RUSTFLAGS="-D warnings" cargo test --lib --workspace
          echo "‚úÖ Library tests passed with zero warnings"
        continue-on-error: ${{ matrix.experimental == true }}
      
      # Integration tests with zero warnings
      - name: Run integration tests (zero warnings)
        run: |
          echo "üîç Running integration tests with zero warning tolerance..."
          RUSTFLAGS="-D warnings" cargo test --test '*' --workspace
          echo "‚úÖ Integration tests passed with zero warnings"
        continue-on-error: ${{ matrix.experimental == true }}
      
      # Binary tool tests with zero warnings
      - name: Test CLI binary (zero warnings)
        run: |
          echo "üîç Testing CLI binary with zero warning tolerance..."
          RUSTFLAGS="-D warnings" cargo test --bin '*' --workspace
          echo "‚úÖ CLI binary tests passed with zero warnings"
        continue-on-error: ${{ matrix.experimental == true }}
      
      # Example tests with zero warnings
      - name: Test examples (zero warnings)
        run: |
          echo "üîç Testing examples with zero warning tolerance..."
          RUSTFLAGS="-D warnings" cargo run --example basic_usage
          RUSTFLAGS="-D warnings" cargo run --example binary_export_demo
          RUSTFLAGS="-D warnings" cargo run --example ownership_demo
          echo "‚úÖ Example tests passed with zero warnings"
        continue-on-error: ${{ matrix.experimental == true }}

  # Performance benchmarks
  benchmarks:
    name: Benchmarks
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && (github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master')
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: bench-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Run benchmarks
        run: cargo bench --bench binary_performance
      
      - name: Upload benchmark results
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: target/criterion/

  # Documentation generation
  docs:
    name: Documentation
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: docs-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build documentation
        run: cargo doc --workspace --all-features --no-deps
      
      - name: Deploy to GitHub Pages
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: peaceiris/actions-gh-pages@v3
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./target/doc
          force_orphan: true

  # Security audit
  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Install cargo-audit
        run: cargo install cargo-audit
      
      - name: Run security audit
        run: cargo audit
      
      - name: Check licenses
        run: |
          cargo install cargo-license
          cargo license --json | jq -r '.[] | select(.license != "MIT" and .license != "Apache-2.0" and .license != "BSD-3-Clause" and .license != "BSD-2-Clause") | .name + ": " + .license'

  # Code coverage (Linux stable only)
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Install cargo-llvm-cov
        run: cargo install cargo-llvm-cov
      
      - name: Generate coverage
        run: cargo llvm-cov --workspace --lcov --output-path lcov.info
      
      - name: Upload to codecov
        uses: codecov/codecov-action@v3
        with:
          files: lcov.info
          fail_ci_if_error: false

  # Release builds (tags only)
  release:
    name: Release
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [quality, test, docs, security]
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        include:
          - os: ubuntu-latest
            target: x86_64-unknown-linux-gnu
            name: memscope-rs-linux-x64
          - os: windows-latest
            target: x86_64-pc-windows-msvc
            name: memscope-rs-windows-x64.exe
          - os: macos-latest
            target: x86_64-apple-darwin
            name: memscope-rs-macos-x64
          - os: macos-latest
            target: aarch64-apple-darwin
            name: memscope-rs-macos-arm64
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}
      
      - name: Cache dependencies
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}-${{ hashFiles('**/Cargo.lock') }}
      
      - name: Build release binary
        run: cargo build --release --target ${{ matrix.target }} --bin memscope
      
      - name: Prepare binary
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            cp target/${{ matrix.target }}/release/memscope.exe ${{ matrix.name }}
          else
            cp target/${{ matrix.target }}/release/memscope ${{ matrix.name }}
          fi
      
      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          files: ${{ matrix.name }}
          draft: false
          prerelease: ${{ contains(github.ref, '-alpha') || contains(github.ref, '-beta') || contains(github.ref, '-rc') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Publish to crates.io
  publish:
    name: Publish to crates.io
    if: startsWith(github.ref, 'refs/tags/v')
    needs: [release]
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Install Rust
        uses: dtolnay/rust-toolchain@stable
      
      - name: Verify version consistency
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          CARGO_VERSION=$(grep '^version' Cargo.toml | head -1 | sed 's/.*"\(.*\)".*/\1/')
          if [ "$VERSION" != "$CARGO_VERSION" ]; then
            echo "Version mismatch: tag=$VERSION, Cargo.toml=$CARGO_VERSION"
            exit 1
          fi
      
      # Publish derive package first
      - name: Publish memscope-derive
        working-directory: memscope-derive
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        continue-on-error: true
      
      # Wait for derive package to be available on crates.io
      - name: Wait for derive package
        run: sleep 30
      
      # Publish main package
      - name: Publish memscope-rs
        run: cargo publish --token ${{ secrets.CRATES_IO_TOKEN }}
        continue-on-error: true